Peace Alley — QR Hunt (Updated Sequential Version)
Overview

Browser-based corridor quest: 20 poster “stations”, each with a QR code encoding its station number (1–20). The student opens the single web page (GitHub Pages). They may start by scanning ANY station. From that point the path is a fixed circular sequence:

 startStation → (startStation+1) → … → 20 → 1 → 2 … until all 20 unique stations are collected.

Hints on each station’s page describe the NEXT station in the fixed chain. Progress is stored locally (no server). This version REMOVES the old random-permutation logic.

Goals

• Allow starting from any station.
• Enforce one-direction, no skipping (must scan the expected next station).
• Finish after all 20 distinct stations scanned exactly once.
• Offline-friendly, quick deploy via GitHub Pages.
• Simple UI for ~6th grade: large buttons, clear feedback.

Functional Requirements
Stations & Hints

• 20 physical stations (posters) with QR codes.
• QR content: recommended format station:NN (NN = 01..20) but any text containing a number 1–20 is parsed.
• Hint pages: /hints/01.html … /hints/20.html. Each page’s text gives the clue for the NEXT station in the fixed order.
• Station 20’s page is the finish and references returning conceptually to Station 1 (symbolic loop close).

Main Page (Single HTML)

Single `index.html` (no framework) + plain JS:
• QR scanner area (html5-qrcode).
• Modal automatically shows hint for the station just scanned (removed manual Get Hint button in this version logic—scanner auto-stops to avoid duplicates).
• “Продовжити сканування” button to resume scanning.
• Progress grid: 20 badges; completed = green, next expected = pulsing.
• Reset button clears all stored progress.

Routing Logic

1. First scan defines startId.
2. Expected next station = (startId + 1) modulo cycle (1 after 20).
3. Student must scan exactly the expectedId. Any other scan:
  • If already visited → message “Already done, look for X”.
  • If not visited but not expected → message “Need station X”.
4. After a correct scan:
  • Add to visited.
  • Compute next expected by advancing sequentially until an unvisited ID (wrap-around). Stop when all 20 collected.
5. When all 20 visited: show finish (station 20 page) and no further expected station.

Persistence (Local Storage)

Keys (v2):
• peace_alley_start_v2 → start station number (int) or null until first scan.
• peace_alley_visited_v2 → JSON array of visited station numbers.
• peace_alley_expected_v2 → next required station number (or empty string when finished).

Reset removes all three keys. (Old v1 random-route keys are deprecated.)

Non-Functional Requirements
Technology & Libraries

• Plain HTML + JS (no frameworks).
• Tailwind via CDN for styling (current implementation) — acceptable for static hosting.
• QR scanning: html5-qrcode (rear camera preference, start/stop, duplicate protection by debouncing identical reads inside 1.2s).

Accessibility & UX

Large, readable buttons and clear status messages.

Works on mobile devices (portrait-friendly).

Handles missing camera permissions gracefully with helpful guidance.

Deployment

Host the main page at the repository root (or project subfolder) on GitHub Pages.

Place hint pages under /hints/01.html … /hints/20.html.

All references should be relative paths so it works at root or subpath.

Privacy & Security

No user accounts and no network storage of progress.

Camera access is local only through the browser’s permissions.

The app never transmits scan results off-device.

Content Structure
/ (GitHub Pages root or subfolder)
  index.html            # main app (scanner, buttons, progress)
  /hints/
    01.html
    02.html
    ...
    20.html


Each hint file is a simple HTML page with a short, student-friendly hint (no scripts required).

Hints should direct students to identify the next station’s theme or visual feature.

QR Code Content Spec

Recommended payload: station:NN where NN is 01..20.

The app will also accept any content containing a number 1..20 (e.g., https://example/hints/07.html).

Local Storage Keys (example)

peace_alley_route_v1 → JSON array of station IDs, e.g., [7, 12, 3, ...]

peace_alley_visited_v1 → JSON array of visited IDs, e.g., [7, 12]

peace_alley_index_v1 → current route index, e.g., 2

Acceptance Criteria (Sequential Version)

 [ ] Main page loads; camera permission requested on Start.
 [ ] First scan sets start station (no randomness) and marks it visited.
 [ ] Only expected station is accepted; others show guidance message.
 [ ] Hint modal auto-opens after each valid scan showing that station’s hint (which describes the next one).
 [ ] Progress badges: visited green, expected pulsing yellow.
 [ ] After 20th unique scan finish page (station 20) shown; no more expected station displayed.
 [ ] Reset wipes v2 keys; a new starting scan may be any station again.
 [ ] Data persists across page refresh until reset.
 [ ] Relative paths function at root or subfolder GitHub Pages deployment.

Nice-to-Haves Implemented
• Auto-pause scanner after correct scan.
• Help accordion (brief explanation) retained.
• Finish page (station 20) present.

Notes for Content Authors

• Keep hints short, age-appropriate (≈6th grade).
• Each visual should clearly embody the concept referenced in the hint.
• Physical placement can now be strictly sequential or circular—random crowd reduction no longer applied in software.

Mapping Summary (NEXT relationships):
1→2, 2→3, 3→4, 4→5, 5→6, 6→7, 7→8, 8→9, 9→10, 10→11, 11→12, 12→13, 13→14, 14→15, 15→16, 16→17, 17→18, 18→19, 19→20, 20→(Finish / symbolic return to 1).

Legacy random-route description retained above only in version control history; this document now reflects the fixed sequential design.